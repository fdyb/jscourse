1. Для практикума из занятия 7 продумать, где можно применить замыкания.
  I. Использовать в функции Move() замыкание на текущую клетку и разными аргументами направления движения для внутренней функции отрисовки (присвоения нужного класса)

  II. Вместо отдельных функций по созданию клетки с едой и клетки с препятствием создать одну функции с замыканием на клетку и разными аргументами для внутренней функции.


2. Не выполняя кода, ответить, что выведет браузер и почему:
if (!("a" in window)) {
    var a = 1;
}
alert(a); // 1 - выражение  ("a" in window) ищет среди ключей глобального объекта 'window' ключ с именем "a", результат - false, !false == true, поэтому объявление с присвоением значения (var a = 1) выполнится и alert(a) выведет '1', так как переменная 'a' объявлена с использованием ключевого слова var, т.е. сохраняет значение вне блока конструкции условия 'if'

var b = function a(x) {
    x && a(--x);
};
alert(a); // должна быть ошибка, так как 'a' фактически не определена явно присвоением или с ключевым словом let/const/var

function a(x) {
    return x * 2;
}
var a;
alert(a); // "function a(x) {return x * 2;}"- будет выведен текст функции 'a', ключевое слово var объявляет переменную, но не изменяет её значения.

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3); // 10 - внутри функции используется ключевой массив 'arguments' (содержащий значения всех аргументов переданных в функцию 'b'), по индексу 2 (индексациия идет с 0) обращаемся к значению аргумента 'a' и присваиваем ему новое значение, оно и будет выведено.

function a() {
    alert(this);
}
a.call(null); // объект window - В JavaScript null не является ссылкой на "пустой" объект, поэтому метод call функции a - не передает объект, которого сработает указатель this
